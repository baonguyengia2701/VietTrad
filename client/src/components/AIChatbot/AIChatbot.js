import React, { useState, useRef, useEffect } from 'react';
import { Modal, Button, Form, Alert, Spinner, Badge } from 'react-bootstrap';
import { FaRobot, FaPaperPlane, FaTimes, FaUser, FaSpinner } from 'react-icons/fa';
import AIService from '../../services/aiService';
import ProductSuggestionCard from './ProductSuggestionCard';
import './AIChatbot.scss';

const AIChatbot = ({ show, onHide }) => {
  const [messages, setMessages] = useState([
    {
      type: 'bot',
      content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa VietTrad. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm s·∫£n ph·∫©m th·ªß c√¥ng truy·ªÅn th·ªëng Vi·ªát Nam ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n. B·∫°n ƒëang t√¨m ki·∫øm g√¨ h√¥m nay?',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [suggestedProducts, setSuggestedProducts] = useState([]);
  const [conversationHistory, setConversationHistory] = useState([]);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (show && inputRef.current) {
      setTimeout(() => inputRef.current.focus(), 100);
    }
  }, [show]);

  // Cleanup effect ƒë·ªÉ ƒë·∫£m b·∫£o unlock scroll khi component unmount
  useEffect(() => {
    return () => {
      try {
        // Ch·ªâ remove CSS classes, kh√¥ng touch DOM elements
        document.body.classList.remove('force-enable-scroll');
        document.documentElement.classList.remove('force-enable-scroll');
      } catch (err) {
        // Ignore cleanup errors
      }
    };
  }, []);

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = {
      type: 'user',
      content: inputMessage.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      // C·∫≠p nh·∫≠t conversation history
      const newHistory = [
        ...conversationHistory,
        { role: 'user', content: inputMessage.trim() }
      ];

      const response = await AIService.chatWithAssistant(inputMessage.trim(), newHistory);

      const botMessage = {
        type: 'bot',
        content: response.message,
        timestamp: new Date(),
        suggestedProducts: response.suggestedProducts || []
      };

      setMessages(prev => [...prev, botMessage]);
      setSuggestedProducts(response.suggestedProducts || []);
      
      // C·∫≠p nh·∫≠t conversation history
      setConversationHistory([
        ...newHistory,
        { role: 'assistant', content: response.message }
      ]);

    } catch (error) {
      const errorMessage = {
        type: 'bot',
        content: `Xin l·ªói, ${error}. Vui l√≤ng th·ª≠ l·∫°i!`,
        timestamp: new Date(),
        isError: true
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatMessageContent = (content) => {
    // X·ª≠ l√Ω format PRODUCT_ID ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã
    return content.replace(/\[PRODUCT_ID:[^\]]+\]/g, '');
  };

  const clearChat = () => {
    setMessages([
      {
        type: 'bot',
        content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa VietTrad. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm s·∫£n ph·∫©m th·ªß c√¥ng truy·ªÅn th·ªëng Vi·ªát Nam ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n. B·∫°n ƒëang t√¨m ki·∫øm g√¨ h√¥m nay?',
        timestamp: new Date()
      }
    ]);
    setConversationHistory([]);
    setSuggestedProducts([]);
  };

  const quickQuestions = [
    'T√¥i mu·ªën t√¨m qu√† t·∫∑ng cho T·∫øt',
    'S·∫£n ph·∫©m l√†m t·ª´ tre n·ª©a',
    '√Åo d√†i truy·ªÅn th·ªëng',
    'ƒê·ªì th·ªß c√¥ng d∆∞·ªõi 500k',
    'S·∫£n ph·∫©m trang tr√≠ nh√†'
  ];

  const handleQuickQuestion = (question) => {
    setInputMessage(question);
    setTimeout(() => handleSendMessage(), 100);
  };

  // Helper function ƒë·ªÉ force unlock scroll - CSS only approach
  const forceUnlockScroll = () => {
    try {
      // Ch·ªâ add CSS class, kh√¥ng manipulate DOM tr·ª±c ti·∫øp
      document.body.classList.add('force-enable-scroll');
      document.documentElement.classList.add('force-enable-scroll');
    } catch (err) {
      console.warn('Error in forceUnlockScroll:', err);
    }
  };

  // Custom onHide ƒë·ªÉ ƒë·∫£m b·∫£o unlock scroll
  const handleModalHide = () => {
    // ƒê∆°n gi·∫£n h√≥a - ch·ªâ g·ªçi onHide, ƒë·ªÉ Bootstrap t·ª± cleanup
    onHide();
    
    // Delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o modal ƒë√£ ƒë√≥ng ho√†n to√†n tr∆∞·ªõc khi unlock scroll
    setTimeout(() => {
      forceUnlockScroll();
    }, 300);
  };

  return (
    <Modal 
      show={show} 
      onHide={handleModalHide} 
      size="lg" 
      className="ai-chatbot-modal"
      backdrop="static"
    >
      <Modal.Header className="ai-chatbot-header">
        <div className="d-flex align-items-center">
          <div className="ai-avatar me-3">
            <FaRobot />
          </div>
          <div>
            <Modal.Title>Tr·ª£ l√Ω AI VietTrad</Modal.Title>
            <small className="text-muted">
              üÜì Local AI - Mi·ªÖn ph√≠ | T√¨m s·∫£n ph·∫©m th√¥ng minh
            </small>
          </div>
        </div>
        <div className="d-flex gap-2">
          <Button variant="outline-light" size="sm" onClick={clearChat} className="header-btn refresh-btn">
            üîÑ L√†m m·ªõi
          </Button>
          <Button variant="outline-light" size="sm" onClick={handleModalHide} className="header-btn close-btn">
            <FaTimes />
          </Button>
        </div>
      </Modal.Header>

      <Modal.Body className="ai-chatbot-body p-0">
        <div className="chat-container">
          <div className="messages-container">
            {messages.map((message, index) => (
              <div key={index} className={`message ${message.type}`}>
                <div className="message-avatar">
                  {message.type === 'bot' ? <FaRobot /> : <FaUser />}
                </div>
                <div className="message-content">
                  <div className={`message-bubble ${message.isError ? 'error' : ''}`}>
                    {formatMessageContent(message.content)}
                  </div>
                  <small className="message-time">
                    {message.timestamp.toLocaleTimeString('vi-VN', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </small>
                  
                  {/* Hi·ªÉn th·ªã s·∫£n ph·∫©m g·ª£i √Ω */}
                  {message.suggestedProducts && message.suggestedProducts.length > 0 && (
                    <div className="suggested-products mt-3">
                      <h6 className="mb-2">
                        <Badge bg="primary">S·∫£n ph·∫©m g·ª£i √Ω</Badge>
                      </h6>
                      <div className="products-list">
                        {message.suggestedProducts.map((product) => (
                          <ProductSuggestionCard 
                            key={product._id} 
                            product={product} 
                            onProductClick={handleModalHide}
                          />
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="message bot">
                <div className="message-avatar">
                  <FaRobot />
                </div>
                <div className="message-content">
                  <div className="message-bubble typing">
                    <FaSpinner className="spin" /> ƒêang suy nghƒ©...
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Questions */}
          {messages.length === 1 && (
            <div className="quick-questions">
              <p className="text-muted mb-2">C√¢u h·ªèi g·ª£i √Ω:</p>
              <div className="d-flex flex-wrap gap-2">
                {quickQuestions.map((question, index) => (
                  <Button
                    key={index}
                    variant="outline-primary"
                    size="sm"
                    onClick={() => handleQuickQuestion(question)}
                    disabled={isLoading}
                  >
                    {question}
                  </Button>
                ))}
              </div>
            </div>
          )}
        </div>
      </Modal.Body>

      <Modal.Footer className="ai-chatbot-footer">
        <div className="input-container w-100">
          <Form.Control
            ref={inputRef}
            as="textarea"
            rows={1}
            placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            disabled={isLoading}
            className="message-input"
          />
          <Button
            variant="primary"
            onClick={handleSendMessage}
            disabled={!inputMessage.trim() || isLoading}
            className="send-button"
            title="G·ª≠i tin nh·∫Øn"
          >
            {isLoading ? (
              <FaSpinner className="spin" />
            ) : (
              <span className="send-icon">üöÄ</span>
            )}
          </Button>
        </div>
      </Modal.Footer>
    </Modal>
  );
};

export default AIChatbot; 