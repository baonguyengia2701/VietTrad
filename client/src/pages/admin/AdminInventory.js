import React, { useState, useEffect, useCallback } from 'react';
import { Container, Row, Col, Card, Button, Modal, Form, Table, Alert, Badge } from 'react-bootstrap';
import inventoryService from '../../services/inventoryService';
import { productService } from '../../services/productService';
import './AdminInventory.scss';

const AdminInventory = () => {
  const [stats, setStats] = useState(null);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  // Modal states
  const [showStockModal, setShowStockModal] = useState(false);
  const [stockModalType, setStockModalType] = useState('in');
  
  // Form states  
  const [stockForm, setStockForm] = useState({
    productId: '',
    quantity: '',
    newQuantity: '',
    reason: '',
    note: ''
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      setError(''); // Clear previous errors
      
      console.log('Loading inventory data...'); // Debug log
      
      // Check if user is logged in
      const userInfo = localStorage.getItem('userInfo');
      if (!userInfo) {
        setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y');
        return;
      }
      
      try {
        const parsedUserInfo = JSON.parse(userInfo);
        console.log('üîç Parsed UserInfo:', parsedUserInfo);
        console.log('üîç User object:', parsedUserInfo.user);
        console.log('üîç User role:', parsedUserInfo.user?.role);
        
        if (!parsedUserInfo.accessToken) {
          setError('Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
          return;
        }
        
        // Check if user is admin - s·ª≠ d·ª•ng isAdmin t·ª´ root level
        const isAdmin = parsedUserInfo.isAdmin;
        console.log('üîç isAdmin value:', isAdmin);
        console.log('üîç Full userInfo structure:', Object.keys(parsedUserInfo));
        
        if (!isAdmin) {
          console.error('‚ùå User is not admin. isAdmin:', isAdmin);
          setError('B·∫°n kh√¥ng c√≥ quy·ªÅn admin ƒë·ªÉ truy c·∫≠p trang n√†y.');
          return;
        }
        
        console.log('‚úÖ Admin access granted');
      } catch (error) {
        console.error('Error parsing userInfo:', error);
        setError('Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        return;
      }
      
      // Load stats
      console.log('Loading stats...'); // Debug log
      const statsData = await inventoryService.getStats();
      console.log('Stats data received:', statsData); // Debug log
      setStats(statsData.data);
      
      // Load products for selection
      console.log('Loading products...'); // Debug log
      const productsData = await productService.getAllProducts({ limit: 1000 });
      console.log('Products data received:', productsData); // Debug log
      setProducts(productsData.products || []);
      
    } catch (error) {
      console.error('Error loading data:', error);
      
      // More specific error handling
      if (error.response?.status === 401) {
        setError('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      } else if (error.response?.status === 403) {
        setError('B·∫°n kh√¥ng c√≥ quy·ªÅn admin ƒë·ªÉ truy c·∫≠p trang n√†y.');
      } else if (error.response?.data?.message) {
        setError(error.response.data.message);
      } else if (error.message) {
        setError(`L·ªói: ${error.message}`);
      } else {
        setError('C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleStockOperation = async (e) => {
    e.preventDefault();
    
    try {
      let response;
      
      switch (stockModalType) {
        case 'in':
          response = await inventoryService.stockIn({
            productId: stockForm.productId,
            quantity: parseInt(stockForm.quantity),
            reason: stockForm.reason,
            note: stockForm.note
          });
          break;
          
        case 'out':
          response = await inventoryService.stockOut({
            productId: stockForm.productId,
            quantity: parseInt(stockForm.quantity),
            reason: stockForm.reason,
            note: stockForm.note
          });
          break;
          
        case 'adjust':
          response = await inventoryService.adjustStock({
            productId: stockForm.productId,
            newQuantity: parseInt(stockForm.newQuantity),
            reason: stockForm.reason,
            note: stockForm.note
          });
          break;
          
        default:
          break;
      }
      
      setSuccess(response.message);
      setShowStockModal(false);
      resetStockForm();
      loadData();
      
      setTimeout(() => setSuccess(''), 3000);
      
    } catch (error) {
      console.error('Error in stock operation:', error);
      setError(error.message || 'C√≥ l·ªói x·∫£y ra');
      setTimeout(() => setError(''), 3000);
    }
  };

  const openStockModal = (type, product = null) => {
    setStockModalType(type);
    if (product) {
      setStockForm(prev => ({ ...prev, productId: product._id }));
    }
    setShowStockModal(true);
  };

  const resetStockForm = () => {
    setStockForm({
      productId: '',
      quantity: '',
      newQuantity: '',
      reason: '',
      note: ''
    });
  };

  const handleCloseModal = useCallback(() => {
    console.log('üîÑ Closing modal...'); // Debug log
    setShowStockModal(false);
    setTimeout(() => {
      resetStockForm();
      setError('');
      setSuccess('');
    }, 100);
    console.log('‚úÖ Modal closed'); // Debug log
  }, []);

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN').format(amount);
  };

  const getStockStatusColor = (stock) => {
    if (stock === 0) return 'danger';
    if (stock <= 5) return 'warning';
    return 'success';
  };

  if (loading) {
    return (
      <Container className="admin-inventory-loading">
        <div className="loading-content">
          <div className="spinner-border" role="status">
            <span className="sr-only">Loading...</span>
          </div>
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </Container>
    );
  }

  return (
    <div className="admin-inventory">
      {/* Enhanced Header Section */}
      <div className="inventory-header">
        <Container fluid>
          <Row>
        <Col>
          <h2>Qu·∫£n l√Ω kho h√†ng</h2>
        </Col>
      </Row>
        </Container>
      </div>

      {/* Main Content */}
      <Container fluid className="inventory-content">
      {error && (
        <Alert variant="danger" className="d-flex justify-content-between align-items-center">
          <span>{error}</span>
          <div>
            <Button 
              variant="outline-info" 
              size="sm"
              className="me-2"
              onClick={() => {
                const userInfo = localStorage.getItem('userInfo');
                console.log('üîç Debug userInfo:', userInfo);
                if (userInfo) {
                  try {
                    const parsed = JSON.parse(userInfo);
                    console.log('üîç Parsed userInfo:', parsed);
                    alert(`UserInfo Debug:\n- isAdmin: ${parsed.isAdmin}\n- Email: ${parsed.email}\n- Name: ${parsed.name}\n- Has AccessToken: ${!!parsed.accessToken}`);
                  } catch (e) {
                    alert('Error parsing userInfo: ' + e.message);
                  }
                } else {
                  alert('No userInfo found in localStorage');
                }
              }}
            >
              Debug
            </Button>
            <Button 
              variant="outline-danger" 
              size="sm"
              onClick={() => {
                setError('');
                loadData();
              }}
            >
              Th·ª≠ l·∫°i
            </Button>
          </div>
        </Alert>
      )}
      {success && <Alert variant="success">{success}</Alert>}

        {/* Statistics Cards Section */}
      {stats && (
          <div className="stats-section">
        <Row className="mb-4">
          <Col md={3}>
            <Card className="stat-card total-products">
              <Card.Body>
                    <div className="stat-icon"></div>
                <h3>{stats.stockStats.totalProducts}</h3>
                <p>T·ªïng s·∫£n ph·∫©m</p>
              </Card.Body>
            </Card>
          </Col>
          <Col md={3}>
            <Card className="stat-card total-stock">
              <Card.Body>
                    <div className="stat-icon"></div>
                <h3>{formatCurrency(stats.stockStats.totalStock)}</h3>
                <p>T·ªïng t·ªìn kho</p>
              </Card.Body>
            </Card>
          </Col>
          <Col md={3}>
            <Card className="stat-card low-stock">
              <Card.Body>
                    <div className="stat-icon"></div>
                <h3>{stats.stockStats.lowStock}</h3>
                <p>S·∫Øp h·∫øt h√†ng</p>
              </Card.Body>
            </Card>
          </Col>
          <Col md={3}>
            <Card className="stat-card out-of-stock">
              <Card.Body>
                    <div className="stat-icon"></div>
                <h3>{stats.stockStats.outOfStock}</h3>
                <p>H·∫øt h√†ng</p>
              </Card.Body>
            </Card>
          </Col>
        </Row>
          </div>
      )}

        {/* Action Buttons Section */}
        <div className="actions-section">
          <Row className="mb-4">
        <Col>
              <div className="actions-container">
                <div className="actions-title">
                  <h4>Thao t√°c kho h√†ng</h4>
                  <p>Ch·ªçn thao t√°c c·∫ßn th·ª±c hi·ªán v·ªõi kho h√†ng</p>
                </div>
                <div className="actions-buttons">
          <Button 
            variant="success" 
            onClick={() => openStockModal('in')}
          >
                    <i className="fas fa-arrow-down me-2"></i>
            Nh·∫≠p kho
          </Button>
          <Button 
            variant="danger" 
            onClick={() => openStockModal('out')}
          >
                    <i className="fas fa-arrow-up me-2"></i>
            Xu·∫•t kho
          </Button>
          <Button 
            variant="warning"
            onClick={() => openStockModal('adjust')}
          >
                    <i className="fas fa-edit me-2"></i>
            ƒêi·ªÅu ch·ªânh kho
          </Button>
                </div>
              </div>
        </Col>
      </Row>
        </div>

        {/* Products Table Section */}
        <div className="products-section">
          <Row>
            <Col>
              <div className="table-container">
                <div className="table-header">
          <h5>Danh s√°ch s·∫£n ph·∫©m</h5>
                </div>
                <div className="table-body">
          <Table responsive hover>
            <thead>
              <tr>
                <th>S·∫£n ph·∫©m</th>
                <th>Danh m·ª•c</th>
                <th>Gi√°</th>
                <th>T·ªìn kho</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {products.map(product => (
                <tr key={product._id}>
                  <td>
                    <div className="d-flex align-items-center">
                      <img 
                        src={product.images?.[0] || '/placeholder.jpg'}
                        alt={product.name}
                                className="product-image me-3"
                        style={{ width: '50px', height: '50px', objectFit: 'cover' }}
                      />
                      <div>
                        <strong>{product.name}</strong>
                        <br />
                        <small className="text-muted">ID: {product._id}</small>
                      </div>
                    </div>
                  </td>
                  <td>{product.categoryName || 'N/A'}</td>
                  <td>{formatCurrency(product.price)}ƒë</td>
                  <td>
                    <Badge bg={getStockStatusColor(product.countInStock)}>
                      {product.countInStock}
                    </Badge>
                  </td>
                  <td>
                    <Badge bg={getStockStatusColor(product.countInStock)}>
                      {product.countInStock === 0 ? 'H·∫øt h√†ng' : 
                       product.countInStock <= 5 ? 'S·∫Øp h·∫øt' : 'C√≤n h√†ng'}
                    </Badge>
                  </td>
                  <td>
                    <Button 
                      size="sm" 
                      variant="success" 
                      className="me-1"
                      onClick={() => openStockModal('in', product)}
                    >
                              <i className="fas fa-plus me-1"></i>
                      Nh·∫≠p
                    </Button>
                    <Button 
                      size="sm" 
                      variant="danger" 
                      className="me-1"
                      onClick={() => openStockModal('out', product)}
                    >
                              <i className="fas fa-minus me-1"></i>
                      Xu·∫•t
                    </Button>
                    <Button 
                      size="sm" 
                      variant="warning"
                      onClick={() => openStockModal('adjust', product)}
                    >
                              <i className="fas fa-edit me-1"></i>
                      ƒêi·ªÅu ch·ªânh
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
                </div>
              </div>
            </Col>
          </Row>
        </div>
      </Container>

      {/* Stock Operation Modal */}
      <Modal 
        show={showStockModal} 
        onHide={handleCloseModal}
        size="xl"
        centered
        backdrop={true}
        keyboard={true}
        className="stock-operation-modal"
        style={{ zIndex: 1055, display: showStockModal ? 'block' : 'none' }}
        dialogClassName="custom-modal-dialog"
      >
        <Modal.Header closeButton>
          <Modal.Title>
            {stockModalType === 'in' && (
              <>
                <i className="fas fa-box-open me-3"></i>
                Nh·∫≠p kho h√†ng
              </>
            )}
            {stockModalType === 'out' && (
              <>
                <i className="fas fa-shipping-fast me-3"></i>
                Xu·∫•t kho h√†ng
              </>
            )}
            {stockModalType === 'adjust' && (
              <>
                <i className="fas fa-sliders-h me-3"></i>
                ƒêi·ªÅu ch·ªânh kho h√†ng
              </>
            )}
          </Modal.Title>
        </Modal.Header>
        <Form onSubmit={handleStockOperation}>
          <Modal.Body className="enhanced-modal-body">
            {/* Product Selection Section */}
            <div className="modal-section">
              <div className="section-header">
                <h6><i className="fas fa-search me-2"></i>Ch·ªçn s·∫£n ph·∫©m</h6>
              </div>
              <Row>
                <Col md={12}>
                  <Form.Group className="mb-3">
                    <Form.Label>S·∫£n ph·∫©m</Form.Label>
                    <Form.Select
                      value={stockForm.productId}
                      onChange={(e) => setStockForm(prev => ({ ...prev, productId: e.target.value }))}
                      required
                    >
                      <option value="">üîç Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ thao t√°c</option>
                      {products.map(product => (
                        <option key={product._id} value={product._id}>
                          üì¶ {product.name} | T·ªìn kho: {product.countInStock} | Gi√°: {formatCurrency(product.price)}ƒë
                        </option>
                      ))}
                    </Form.Select>
                  </Form.Group>
                </Col>
              </Row>

              {/* Product Preview */}
              {stockForm.productId && (() => {
                const selectedProduct = products.find(p => p._id === stockForm.productId);
                return selectedProduct ? (
                  <div className="product-preview">
                    <div className="preview-header">
                      <h6><i className="fas fa-eye me-2"></i>Th√¥ng tin s·∫£n ph·∫©m</h6>
                    </div>
                    <div className="preview-content">
                      <Row>
                        <Col md={3}>
                          <div className="preview-image">
                            <img 
                              src={selectedProduct.images?.[0] || '/placeholder.jpg'}
                              alt={selectedProduct.name}
                              className="img-fluid rounded"
                            />
                          </div>
                        </Col>
                        <Col md={9}>
                          <div className="preview-details">
                            <h5 className="product-name">{selectedProduct.name}</h5>
                            <div className="product-info">
                              <Row>
                                <Col md={6}>
                                  <div className="info-item">
                                    <span className="label">Danh m·ª•c:</span>
                                    <span className="value">{selectedProduct.categoryName || 'N/A'}</span>
                                  </div>
                                  <div className="info-item">
                                    <span className="label">Gi√° b√°n:</span>
                                    <span className="value">{formatCurrency(selectedProduct.price)}ƒë</span>
                                  </div>
                                </Col>
                                <Col md={6}>
                                  <div className="info-item">
                                    <span className="label">T·ªìn kho hi·ªán t·∫°i:</span>
                                    <span className={`value current-stock ${getStockStatusColor(selectedProduct.countInStock)}`}>
                                      {selectedProduct.countInStock} s·∫£n ph·∫©m
                                    </span>
                                  </div>
                                  <div className="info-item">
                                    <span className="label">Tr·∫°ng th√°i:</span>
                                    <span className={`value status-badge ${
                                      selectedProduct.countInStock === 0 ? 'text-danger' : 
                                      selectedProduct.countInStock <= 5 ? 'text-warning' : 'text-success'
                                    }`}>
                                      {selectedProduct.countInStock === 0 ? 'H·∫øt h√†ng' : 
                                       selectedProduct.countInStock <= 5 ? 'S·∫Øp h·∫øt' : 'C√≤n h√†ng'}
                                    </span>
                                  </div>
                                </Col>
                              </Row>
                            </div>
                          </div>
                        </Col>
                      </Row>
                    </div>
                  </div>
                ) : null;
              })()}
            </div>

            {/* Transaction Details Section */}
            <div className="modal-section">
              <div className="section-header">
                <h6><i className="fas fa-edit me-2"></i>Chi ti·∫øt giao d·ªãch</h6>
              </div>
              <Row>
                {stockModalType !== 'adjust' ? (
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>S·ªë l∆∞·ª£ng</Form.Label>
                      <div className="input-group">
                        <Form.Control
                          type="number"
                          min="1"
                          value={stockForm.quantity}
                          onChange={(e) => setStockForm(prev => ({ ...prev, quantity: e.target.value }))}
                          required
                          placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng"
                        />
                        <span className="input-group-text">
                          {stockModalType === 'in' ? 's·∫£n ph·∫©m nh·∫≠p' : 's·∫£n ph·∫©m xu·∫•t'}
                        </span>
                      </div>
                    </Form.Group>
                  </Col>
                ) : (
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>S·ªë l∆∞·ª£ng m·ªõi</Form.Label>
                      <div className="input-group">
                        <Form.Control
                          type="number"
                          min="0"
                          value={stockForm.newQuantity}
                          onChange={(e) => setStockForm(prev => ({ ...prev, newQuantity: e.target.value }))}
                          required
                          placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng m·ªõi"
                        />
                        <span className="input-group-text">s·∫£n ph·∫©m</span>
                      </div>
                    </Form.Group>
                  </Col>
                )}

                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>L√Ω do</Form.Label>
                    <Form.Select
                      value={stockForm.reason}
                      onChange={(e) => setStockForm(prev => ({ ...prev, reason: e.target.value }))}
                      required
                    >
                      <option value="">Ch·ªçn l√Ω do thao t√°c</option>
                      {stockModalType === 'in' && (
                        <>
                          <option value="Nh·∫≠p h√†ng m·ªõi">üì¶ Nh·∫≠p h√†ng m·ªõi</option>
                          <option value="Tr·∫£ l·∫°i t·ª´ kh√°ch h√†ng">‚Ü©Ô∏è Tr·∫£ l·∫°i t·ª´ kh√°ch h√†ng</option>
                          <option value="Chuy·ªÉn kho">üîÑ Chuy·ªÉn kho</option>
                          <option value="Nh·∫≠p b·ªï sung">‚ûï Nh·∫≠p b·ªï sung</option>
                        </>
                      )}
                      {stockModalType === 'out' && (
                        <>
                          <option value="B√°n h√†ng">üí∞ B√°n h√†ng</option>
                          <option value="H∆∞ h·ªèng">‚ùå H∆∞ h·ªèng</option>
                          <option value="Chuy·ªÉn kho">üîÑ Chuy·ªÉn kho</option>
                          <option value="Khuy·∫øn m√£i">üéÅ Khuy·∫øn m√£i</option>
                          <option value="M·∫´u th·ª≠">üß™ M·∫´u th·ª≠</option>
                        </>
                      )}
                      {stockModalType === 'adjust' && (
                        <>
                          <option value="Ki·ªÉm k√™">üìä Ki·ªÉm k√™</option>
                          <option value="ƒêi·ªÅu ch·ªânh l·ªói">‚öôÔ∏è ƒêi·ªÅu ch·ªânh l·ªói</option>
                          <option value="Th·∫•t tho√°t">‚ö†Ô∏è Th·∫•t tho√°t</option>
                          <option value="C·∫≠p nh·∫≠t h·ªá th·ªëng">üîÑ C·∫≠p nh·∫≠t h·ªá th·ªëng</option>
                        </>
                      )}
                    </Form.Select>
                  </Form.Group>
                </Col>
              </Row>

              {/* Calculation Preview */}
              {stockForm.productId && (stockForm.quantity || stockForm.newQuantity) && (() => {
                const selectedProduct = products.find(p => p._id === stockForm.productId);
                if (!selectedProduct) return null;
                
                let newStock = selectedProduct.countInStock;
                if (stockModalType === 'in') {
                  newStock += parseInt(stockForm.quantity || 0);
                } else if (stockModalType === 'out') {
                  newStock -= parseInt(stockForm.quantity || 0);
                } else if (stockModalType === 'adjust') {
                  newStock = parseInt(stockForm.newQuantity || 0);
                }

                return (
                  <div className="calculation-preview">
                    <h6><i className="fas fa-calculator me-2"></i>D·ª± t√≠nh k·∫øt qu·∫£</h6>
                    <div className="calculation-content">
                      <Row>
                        <Col md={4} className="text-center">
                          <div className="calc-item current">
                            <div className="calc-value">{selectedProduct.countInStock}</div>
                            <div className="calc-label">T·ªìn kho hi·ªán t·∫°i</div>
                          </div>
                        </Col>
                        <Col md={4} className="text-center">
                          <div className="calc-item operation">
                            <div className="calc-icon">
                              {stockModalType === 'in' && <i className="fas fa-plus"></i>}
                              {stockModalType === 'out' && <i className="fas fa-minus"></i>}
                              {stockModalType === 'adjust' && <i className="fas fa-arrow-right"></i>}
                            </div>
                            <div className="calc-value">
                              {stockModalType === 'adjust' 
                                ? stockForm.newQuantity 
                                : stockForm.quantity}
                            </div>
                            <div className="calc-label">
                              {stockModalType === 'in' && 'S·ªë l∆∞·ª£ng nh·∫≠p'}
                              {stockModalType === 'out' && 'S·ªë l∆∞·ª£ng xu·∫•t'}
                              {stockModalType === 'adjust' && 'S·ªë l∆∞·ª£ng m·ªõi'}
                            </div>
                          </div>
                        </Col>
                        <Col md={4} className="text-center">
                          <div className={`calc-item result ${newStock < 0 ? 'error' : ''}`}>
                            <div className={`calc-value ${newStock < 0 ? 'error' : ''}`}>
                              {newStock}
                              {newStock < 0 && <i className="fas fa-exclamation-triangle ms-1"></i>}
                            </div>
                            <div className="calc-label">T·ªìn kho sau thao t√°c</div>
                            {newStock < 0 && (
                              <div className="error-message">
                                <small className="text-danger">‚ö†Ô∏è Kh√¥ng ƒë·ªß h√†ng ƒë·ªÉ xu·∫•t!</small>
                              </div>
                            )}
                          </div>
                        </Col>
                      </Row>
                    </div>
                  </div>
                );
              })()}

              <Row>
                <Col md={12}>
                  <Form.Group className="mb-0">
                    <Form.Label className="optional">Ghi ch√∫</Form.Label>
                    <Form.Control
                      as="textarea"
                      rows={3}
                      value={stockForm.note}
                      onChange={(e) => setStockForm(prev => ({ ...prev, note: e.target.value }))}
                      placeholder="Th√™m ghi ch√∫ chi ti·∫øt v·ªÅ giao d·ªãch n√†y (kh√¥ng b·∫Øt bu·ªôc)..."
                      style={{ resize: 'vertical' }}
                    />
                    <Form.Text className="text-muted">
                      Ghi ch√∫ s·∫Ω gi√∫p theo d√µi l·ªãch s·ª≠ giao d·ªãch t·ªët h∆°n
                    </Form.Text>
                  </Form.Group>
                </Col>
              </Row>
            </div>
          </Modal.Body>
          <Modal.Footer className="modal-footer-enhanced">
            <div className="footer-content">
              <div className="footer-info">
                <small className="text-muted">
                  <i className="fas fa-info-circle me-1"></i>
                  Thao t√°c n√†y s·∫Ω ƒë∆∞·ª£c ghi l·∫°i trong l·ªãch s·ª≠ kho h√†ng
                </small>
              </div>
              <div className="footer-actions">
                <Button 
                  variant="secondary" 
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    handleCloseModal();
                  }}
                  className="me-3"
                  type="button"
                >
                  <i className="fas fa-times me-2"></i>
                  H·ªßy b·ªè
                </Button>
                <Button 
                  type="submit" 
                  variant="primary"
                  disabled={(() => {
                    const selectedProduct = products.find(p => p._id === stockForm.productId);
                    if (!selectedProduct) return true;
                    
                    if (stockModalType === 'out') {
                      const newStock = selectedProduct.countInStock - parseInt(stockForm.quantity || 0);
                      return newStock < 0;
                    }
                    return false;
                  })()}
                >
                  {stockModalType === 'in' && (
                    <>
                      <i className="fas fa-arrow-down me-2"></i>
                      X√°c nh·∫≠n nh·∫≠p kho
                    </>
                  )}
                  {stockModalType === 'out' && (
                    <>
                      <i className="fas fa-arrow-up me-2"></i>
                      X√°c nh·∫≠n xu·∫•t kho
                    </>
                  )}
                  {stockModalType === 'adjust' && (
                    <>
                      <i className="fas fa-edit me-2"></i>
                      X√°c nh·∫≠n ƒëi·ªÅu ch·ªânh
                    </>
                  )}
                </Button>
              </div>
            </div>
          </Modal.Footer>
        </Form>
      </Modal>
    </div>
  );
};

export default AdminInventory;
